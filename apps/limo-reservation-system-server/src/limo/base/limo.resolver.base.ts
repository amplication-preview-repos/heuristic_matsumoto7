/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Limo } from "./Limo";
import { LimoCountArgs } from "./LimoCountArgs";
import { LimoFindManyArgs } from "./LimoFindManyArgs";
import { LimoFindUniqueArgs } from "./LimoFindUniqueArgs";
import { CreateLimoArgs } from "./CreateLimoArgs";
import { UpdateLimoArgs } from "./UpdateLimoArgs";
import { DeleteLimoArgs } from "./DeleteLimoArgs";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { LimoService } from "../limo.service";
@graphql.Resolver(() => Limo)
export class LimoResolverBase {
  constructor(protected readonly service: LimoService) {}

  async _limosMeta(
    @graphql.Args() args: LimoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Limo])
  async limos(@graphql.Args() args: LimoFindManyArgs): Promise<Limo[]> {
    return this.service.limos(args);
  }

  @graphql.Query(() => Limo, { nullable: true })
  async limo(@graphql.Args() args: LimoFindUniqueArgs): Promise<Limo | null> {
    const result = await this.service.limo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Limo)
  async createLimo(@graphql.Args() args: CreateLimoArgs): Promise<Limo> {
    return await this.service.createLimo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Limo)
  async updateLimo(@graphql.Args() args: UpdateLimoArgs): Promise<Limo | null> {
    try {
      return await this.service.updateLimo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Limo)
  async deleteLimo(@graphql.Args() args: DeleteLimoArgs): Promise<Limo | null> {
    try {
      return await this.service.deleteLimo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Reservation], { name: "reservations" })
  async findReservations(
    @graphql.Parent() parent: Limo,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
